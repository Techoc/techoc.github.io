<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>群晖Docker搭建cloudreve</title>
    <link href="/posts/e2328adc.html"/>
    <url>/posts/e2328adc.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Cloudreve是一个十分强大的网盘程序，可以利用Docker进行快速部署，这次使用群晖上的Docker进行本地部署</p></blockquote><p><img src="https://i.techoc.cn/2021/08/13/3107b398360ac.png"></p><h2 id="一、下载Docker镜像"><a href="#一、下载Docker镜像" class="headerlink" title="一、下载Docker镜像"></a>一、下载Docker镜像</h2><blockquote><p>搜索镜像<code>xavierniu/cloudreve</code> 下载</p></blockquote><h2 id="二、创建文件夹"><a href="#二、创建文件夹" class="headerlink" title="二、创建文件夹"></a>二、创建文件夹</h2><blockquote><p>在<code>File Station</code>中创建<code>cloudreve</code>文件夹,在<code>cloudreve</code>文件夹中创建以下内容</p><ul><li><p><code>avatar</code> 是空文件夹</p></li><li><p><code>uploads</code> 是空文件夹</p></li><li><p><code>cloudreve.db</code> 是空文件</p></li><li><p><code>conf.ini</code> 也是空文件</p></li></ul></blockquote><p><img src="https://i.techoc.cn/2021/03/13/e96cf607cdebc.png" alt="image-20210313113413934"></p><h2 id="三、启动Docker镜像"><a href="#三、启动Docker镜像" class="headerlink" title="三、启动Docker镜像"></a>三、启动Docker镜像</h2><blockquote><p>卷设置</p></blockquote><p><img src="https://i.techoc.cn/2021/03/13/b51d2cb5924e4.png" alt="image-20210313115601214"></p><blockquote><p>端口映射</p></blockquote><p><img src="https://i.techoc.cn/2021/03/13/46ef66d3b6d00.png" alt="image-20210313115619118"></p><h2 id="四、获取初始密码"><a href="#四、获取初始密码" class="headerlink" title="四、获取初始密码"></a>四、获取初始密码</h2><blockquote><p>打开刚启动的Docker容器 找到日志</p></blockquote><p><img src="https://i.techoc.cn/2021/03/13/05120fe84a30d.png" alt="image-20210313115835459"></p><blockquote><p>打开浏览器输入<code>域名:5212</code>就可以登录<code>cloudreve</code>了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>群晖</category>
      
      <category>Cloudreve</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础</title>
    <link href="/posts/1d9fbb6a.html"/>
    <url>/posts/1d9fbb6a.html</url>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p><span id="more"></span><h2 id="一、Docker介绍"><a href="#一、Docker介绍" class="headerlink" title="一、Docker介绍"></a>一、Docker介绍</h2><h3 id="1-1-Docker的思想"><a href="#1-1-Docker的思想" class="headerlink" title="1.1 Docker的思想"></a>1.1 Docker的思想</h3><blockquote><ul><li>集装箱：会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到这个集装箱就可以了</li><li>标准化：<ul><li>运输的标准化：Docker有一个码头，所有上传的集装箱都放在了这个码头上，当谁需要某一个环境，就直接指派Docker去搬运这个集装箱就可以了</li><li>命令的标准化：Docker提供了一些列的命令，帮助我们去获取集装箱等等操作</li><li>提供了REST的API:衍生出了很多的图形化界面，Rancher</li></ul></li><li>隔离性：Docker在运行集装箱内的内容时，会在Linux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序</li><li>中央仓库|注册中心：超级码头，上面放的就是集装箱</li><li>镜像：就是集装箱</li><li>容器：运行起来的镜像</li></ul></blockquote><h2 id="二、Docker的安装"><a href="#二、Docker的安装" class="headerlink" title="二、Docker的安装"></a>二、Docker的安装</h2><h3 id="2-1-下载Docker依赖的环境"><a href="#2-1-下载Docker依赖的环境" class="headerlink" title="2.1 下载Docker依赖的环境"></a>2.1 下载Docker依赖的环境</h3><blockquote><p>想安装Docker,需要先将依赖的环境全部下载，就像Maven依赖JDK一样</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h3 id="2-2-指定Docker镜像源"><a href="#2-2-指定Docker镜像源" class="headerlink" title="2.2 指定Docker镜像源"></a>2.2 指定Docker镜像源</h3><blockquote><p>默认下载Docker会去国外服务器下载，速度较慢，我们可以设置为阿里云镜像源，速度更快</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="2-3-安装Docker"><a href="#2-3-安装Docker" class="headerlink" title="2.3 安装Docker"></a>2.3 安装Docker</h3><blockquote><p>依然采用yum的方式安装</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum makecache fast<br>sudo yum -y install docker-ce<br></code></pre></td></tr></table></figure><h3 id="2-4-启动Docker"><a href="#2-4-启动Docker" class="headerlink" title="2.4 启动Docker"></a>2.4 启动Docker</h3><blockquote><p>安装成功后，需要手动启动，设置为开机自启，并测试一下Docker</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动Docker服务</span><br>systemctl start docker<br><br><span class="hljs-comment"># 设置开机自动启动</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><br><span class="hljs-comment"># 测试</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h2 id="三、Docker的中央仓库"><a href="#三、Docker的中央仓库" class="headerlink" title="三、Docker的中央仓库"></a>三、Docker的中央仓库</h2><blockquote><ul><li><p>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</p><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p></li><li><p>国内的镜像网站：阿里云,网易蜂巢,daoCloud等，下载速度快,但是镜像相对不全。</p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p><a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a><br><a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a>(推荐使用）</p></li><li><p>在公司内部会采用私服的方式拉取镜像，需要添加配置，如下</p></li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"># 需要创建/etc/docker/daemon.json,并添加如下内容<br>&#123;<br><span class="hljs-attr">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>],<br><span class="hljs-attr">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;ip:port&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#重启两个服务</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="四、镜像的操作"><a href="#四、镜像的操作" class="headerlink" title="四、镜像的操作"></a>四、镜像的操作</h2><h3 id="4-1-拉取镜像"><a href="#4-1-拉取镜像" class="headerlink" title="4.1 拉取镜像"></a>4.1 拉取镜像</h3><blockquote><p>从中央仓库拉取镜像到本地</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 镜像名称[:tag]<br><span class="hljs-comment">#举个栗子：docker pull tomcat:8.5.15-jre8</span><br></code></pre></td></tr></table></figure><h3 id="4-2-查看本地全部镜像"><a href="#4-2-查看本地全部镜像" class="headerlink" title="4.2 查看本地全部镜像"></a>4.2 查看本地全部镜像</h3><blockquote><p>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br></code></pre></td></tr></table></figure><h3 id="4-3删除本地镜像"><a href="#4-3删除本地镜像" class="headerlink" title="4.3删除本地镜像"></a>4.3删除本地镜像</h3><blockquote><p>镜像会占用磁盘空间，可以直接手动删除，表示通过查看获取</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi 镜像的标识<br></code></pre></td></tr></table></figure><h3 id="4-4镜像的导入导出"><a href="#4-4镜像的导入导出" class="headerlink" title="4.4镜像的导入导出"></a>4.4镜像的导入导出</h3><blockquote><p>如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null,需要手动修改</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将本地的镜像导出</span><br>docker save -o 导出的路径镜像id<br><span class="hljs-comment"># 加载本地的镜像文件</span><br>docker load -i 镜像文件<br><span class="hljs-comment"># 修改镜像名称</span><br>docker tag 镜像id 新镜像名称:版本<br></code></pre></td></tr></table></figure><h2 id="五、容器操作"><a href="#五、容器操作" class="headerlink" title="五、容器操作"></a>五、容器操作</h2><h3 id="5-1运行容器"><a href="#5-1运行容器" class="headerlink" title="5.1运行容器"></a>5.1运行容器</h3><blockquote><p>运行容器需要制定具体镜像，如果镜像不存在，会直接下载</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 简单操作</span><br>docker run 镜像的标识|镜像名称[:tag]<br><span class="hljs-comment"># 常用的参数</span><br>docker run -d -p 宿主机端口：容器端口 --name 容器名称镜像的标识|镜像名称[:tag]<br><span class="hljs-comment"># -d:代表后台运行容器</span><br><span class="hljs-comment"># -p宿主机端口：容器端口：为了映射当前Linux的端口和容器的端口</span><br><span class="hljs-comment"># --name容器名称：指定容器的名称</span><br></code></pre></td></tr></table></figure><h3 id="5-2查看正在运行的容器"><a href="#5-2查看正在运行的容器" class="headerlink" title="5.2查看正在运行的容器"></a>5.2查看正在运行的容器</h3><blockquote><p>查看全部正在运行的容器信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps [-qa]<br><span class="hljs-comment"># -a:查看全部的容器，包括没有运行</span><br><span class="hljs-comment"># -q:只查看容器的标识</span><br></code></pre></td></tr></table></figure><h3 id="5-3查看容器日志"><a href="#5-3查看容器日志" class="headerlink" title="5.3查看容器日志"></a>5.3查看容器日志</h3><blockquote><p>查看容器日志，以查看容器运行的信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f 容器id<br><span class="hljs-comment"># -f:可以滚动查看日志的最后几行</span><br></code></pre></td></tr></table></figure><h3 id="5-4进入容器内部"><a href="#5-4进入容器内部" class="headerlink" title="5.4进入容器内部"></a>5.4进入容器内部</h3><blockquote><p>可以进入容器内部进行操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it 容器id bash<br></code></pre></td></tr></table></figure><h3 id="5-5复制内容到容器"><a href="#5-5复制内容到容器" class="headerlink" title="5.5复制内容到容器"></a>5.5复制内容到容器</h3><blockquote><p>将宿主机的文件复制到容器内部的指定目录</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker cp 文件名称 容器id:容器内部路径<br></code></pre></td></tr></table></figure><h3 id="5-6重启-amp-启动-amp-停止-amp-删除容器"><a href="#5-6重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="5.6重启&amp;启动&amp;停止&amp;删除容器"></a>5.6重启&amp;启动&amp;停止&amp;删除容器</h3><blockquote><p>容器的启动，停止，删除等操作，后续经常会使用到</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重新启动容器</span><br>docker restart 容器id<br><br><span class="hljs-comment"># 启动停止运行的容器</span><br>docker start 容器id<br><br><span class="hljs-comment"># 停止指定的容器（删除容器前，需要先停止容器）</span><br>docker stop 容器id<br><br><span class="hljs-comment"># 停止全部容器</span><br>docker stop $(docker ps-qa)<br><br><span class="hljs-comment"># 删除指定容器</span><br>docker rm 容器id<br><br><span class="hljs-comment"># 删除全部容器</span><br>docker rm $(docker ps-qa)<br></code></pre></td></tr></table></figure><h2 id="六、Docker应用"><a href="#六、Docker应用" class="headerlink" title="六、Docker应用"></a>六、Docker应用</h2><h3 id="6-1-Docker安装Tomcat"><a href="#6-1-Docker安装Tomcat" class="headerlink" title="6.1 Docker安装Tomcat"></a>6.1 Docker安装Tomcat</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 8080:8080 --name tomcat tomcat:8.5.15-jre8<br></code></pre></td></tr></table></figure><h3 id="6-2-Docker安装MySQL"><a href="#6-2-Docker安装MySQL" class="headerlink" title="6.2 Docker安装MySQL"></a>6.2 Docker安装MySQL</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7.4<br></code></pre></td></tr></table></figure><h2 id="七、数据卷"><a href="#七、数据卷" class="headerlink" title="七、数据卷"></a>七、数据卷</h2><blockquote><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p></blockquote><h3 id="7-1-创建数据卷"><a href="#7-1-创建数据卷" class="headerlink" title="7.1 创建数据卷"></a>7.1 创建数据卷</h3><blockquote><p>创建数据卷之后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create 数据卷名称<br></code></pre></td></tr></table></figure><h3 id="7-2查看数据卷详情"><a href="#7-2查看数据卷详情" class="headerlink" title="7.2查看数据卷详情"></a>7.2查看数据卷详情</h3><blockquote><p>查看数据卷的详细信息，可以查询到存放路径，创建时间等等</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect 数据卷名称<br></code></pre></td></tr></table></figure><h3 id="7-3查看全部数据卷"><a href="#7-3查看全部数据卷" class="headerlink" title="7.3查看全部数据卷"></a>7.3查看全部数据卷</h3><blockquote><p>查看全部数据卷信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume ls<br></code></pre></td></tr></table></figure><h3 id="7-4删除数据卷"><a href="#7-4删除数据卷" class="headerlink" title="7.4删除数据卷"></a>7.4删除数据卷</h3><blockquote><p>删除指定数据卷</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume rm 数据卷名称<br></code></pre></td></tr></table></figure><h3 id="7-5容器映射数据卷"><a href="#7-5容器映射数据卷" class="headerlink" title="7.5容器映射数据卷"></a>7.5容器映射数据卷</h3><blockquote><p>映射有两种方式：</p><ul><li>通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</li><li>通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 通过数据卷名称映射</span><br>docker run -v 数据卷名称:容器内部的路径 镜像id<br><span class="hljs-comment"># 通过路径映射数据卷</span><br>docker run -v 路径:容器内部的路径 镜像id<br></code></pre></td></tr></table></figure><h2 id="八、Dockerfile自定义镜像"><a href="#八、Dockerfile自定义镜像" class="headerlink" title="八、Dockerfile自定义镜像"></a>八、Dockerfile自定义镜像</h2><blockquote><p>我们可以从中央仓库下载一个镜像，也可以自己手动去制作一个镜像，需要通过Dockerfile去指定自定义镜像的信息</p></blockquote><h3 id="8-1-Dockerfile"><a href="#8-1-Dockerfile" class="headerlink" title="8.1 Dockerfile"></a>8.1 Dockerfile</h3><blockquote><p>创建自定义镜像就需要创建一个Dockerfile,如下为Dockerfile的语言</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">from</span>:指定当前自定义镜像依赖的环境<br><span class="hljs-keyword">copy</span><span class="bash">:将相对路径下的内容复制到自定义镜像中</span><br><span class="hljs-keyword">workdir</span><span class="bash">:声明镜像的默认工作目录</span><br><span class="hljs-keyword">run</span><span class="bash">:执行的命令，可以编写多个</span><br><span class="hljs-keyword">cmd</span><span class="bash">:需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）</span><br><br><span class="hljs-comment"># 举个例子，制作SSM容器镜像，而且ssm.war要放在Dockerfile的同级目录下</span><br><span class="hljs-keyword">from</span> tomcat:<span class="hljs-number">8.5</span>.<span class="hljs-number">15</span>-jre8<br><span class="hljs-keyword">copy</span><span class="bash"> ssm.war /usr/<span class="hljs-built_in">local</span>/tomcat/webapps</span><br></code></pre></td></tr></table></figure><h3 id="8-2通过Dockerfile制作镜像"><a href="#8-2通过Dockerfile制作镜像" class="headerlink" title="8.2通过Dockerfile制作镜像"></a>8.2通过Dockerfile制作镜像</h3><blockquote><p>编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的<code>.</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t 镜像名称[:tag] .<br></code></pre></td></tr></table></figure><h2 id="九、Docekr-compose"><a href="#九、Docekr-compose" class="headerlink" title="九、Docekr-compose"></a>九、Docekr-compose</h2><blockquote><p>之前运行一个镜像，需要添加大量的参数，可以通过Docker-Compose编写这些参数。而且Docker-Compose可以帮助我们批量的管理容器。这些信息只需要通过一个docker-compose.yml文件去维护即可。</p></blockquote><h3 id="9-1-下载并安装Docker-compose"><a href="#9-1-下载并安装Docker-compose" class="headerlink" title="9.1 下载并安装Docker-compose"></a>9.1 下载并安装Docker-compose</h3><h4 id="9-1-1-下载Docker-compose"><a href="#9-1-1-下载Docker-compose" class="headerlink" title="9.1.1 下载Docker-compose"></a>9.1.1 下载Docker-compose</h4><blockquote><p>github搜索Docker-compose 下载1.24.1版本</p><p><a href="https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</a></p></blockquote><h4 id="9-1-2设置权限"><a href="#9-1-2设置权限" class="headerlink" title="9.1.2设置权限"></a>9.1.2设置权限</h4><blockquote><p>需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mv docker-compose-Linux-x86_64 docker-compose<br>chmod 777 docker-compose<br></code></pre></td></tr></table></figure><h4 id="9-1-3配置环境变量"><a href="#9-1-3配置环境变量" class="headerlink" title="9.1.3配置环境变量"></a>9.1.3配置环境变量</h4><blockquote><p>方便后期操作，配置一个环境变量</p><p>将docker-compose文件移动到了/usr/local/bin,修改了/etc/profile文件，给/usr/local/bin配置到了PATH中</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">mv docker-compose /usr/<span class="hljs-built_in">local</span>/bin<br><br>vi/etc/profile<br><span class="hljs-comment"># 添加内容：export PATH=SJAVA_HOME:/usr/local/bin:SPATH</span><br><br><span class="hljs-built_in">source</span>/etc/profile<br></code></pre></td></tr></table></figure><h4 id="9-1-4测试"><a href="#9-1-4测试" class="headerlink" title="9.1.4测试"></a>9.1.4测试</h4><blockquote><p>在任意目录下输入<code>docker-compose</code></p></blockquote><h3 id="9-2-Docker-Compose管理MySQL和Tomcat容器"><a href="#9-2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="9.2 Docker-Compose管理MySQL和Tomcat容器"></a>9.2 Docker-Compose管理MySQL和Tomcat容器</h3><blockquote><p>yml文件以key:value方式来指定配置信息</p><p>多个配置信息以换行+缩进的方式来区分</p><p>在Docker-compose.yml文件中，不要使用制表符</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span> <br>  <span class="hljs-attr">mysql:</span>    <span class="hljs-comment"># 服务名称</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>   <span class="hljs-comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.4</span>  <span class="hljs-comment"># 指定镜像路径</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span> <span class="hljs-comment"># 指定容器名称</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span>   <span class="hljs-comment"># 指定端口号的映射</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span>   <span class="hljs-comment"># 指定MYSQL的root用户登录密码</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span>   <span class="hljs-comment"># 指定时区</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span>    <span class="hljs-comment"># 映射数据卷</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.15-jre8</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span><br></code></pre></td></tr></table></figure><h3 id="9-3使用Docker-compose命令管理容器"><a href="#9-3使用Docker-compose命令管理容器" class="headerlink" title="9.3使用Docker-compose命令管理容器"></a>9.3使用Docker-compose命令管理容器</h3><blockquote><p>在使用Docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1.基于docker-compose.yml启动管理的容器</span><br>docker-compose up -d<br><br><span class="hljs-comment"># 2.关闭并删除容器</span><br>docker-compose down<br><br><span class="hljs-comment"># 3.开启|关闭|重启已经存在的由docker-compose维护的容器</span><br>docker-compose start|stop|restart<br><br><span class="hljs-comment"># 4.查看由docker-compose管理的容器</span><br>docker-compose ps<br><br><span class="hljs-comment"># 5.查看日志</span><br>docker-compose logs-f<br></code></pre></td></tr></table></figure><h3 id="9-4-Docker-compose配合Dockerfile使用"><a href="#9-4-Docker-compose配合Dockerfile使用" class="headerlink" title="9.4 Docker-compose配合Dockerfile使用"></a>9.4 Docker-compose配合Dockerfile使用</h3><blockquote><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p></blockquote><h4 id="9-4-1-docker-compose文件"><a href="#9-4-1-docker-compose文件" class="headerlink" title="9.4.1 docker-compose文件"></a>9.4.1 docker-compose文件</h4><blockquote><p>编写docker-compose.yml文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># yml文件</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">ssm:</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">build:</span>            <span class="hljs-comment"># 构建自定义镜像</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">../</span>      <span class="hljs-comment"># 指定dockerfile文件的所在路径</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span>   <span class="hljs-comment"># 指定Dockerfile文件名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ssm:1.0.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">ssm</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8081</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br></code></pre></td></tr></table></figure><h4 id="9-4-2-Dockerfile文件"><a href="#9-4-2-Dockerfile文件" class="headerlink" title="9.4.2 Dockerfile文件"></a>9.4.2 Dockerfile文件</h4><blockquote><p>编写Dockerfile文件</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">from</span> tomcat:<span class="hljs-number">8.5</span>.<span class="hljs-number">15</span>-jre8<br><span class="hljs-keyword">copy</span><span class="bash"> ssm.war /usr/<span class="hljs-built_in">local</span>/tomcat/webapps</span><br></code></pre></td></tr></table></figure><h4 id="9-4-3运行"><a href="#9-4-3运行" class="headerlink" title="9.4.3运行"></a>9.4.3运行</h4><blockquote><p>测试效果</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span><br>docker-compose up -d<br><br><span class="hljs-comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span><br><span class="hljs-comment"># 重新构建的话。</span><br><span class="hljs-comment"># 重新构建自定义镜像</span><br>docker-compose build<br><br><span class="hljs-comment"># 运行当前内容，并重新构建</span><br>docker-compose up -d --build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
